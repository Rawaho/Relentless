/*
 * Copyright (C) 2013-2016 RelentlessZero
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace ScrollsPatcher
{
    class Program
    {
        // public key found in Scrolls client: <Modulus>mFCubVhPGG+euHuVQbNObqod/Ji0kRe+oh2OCFR7aV09xYiOklqFQ8jgIgAHvyCcM1JowqfFeJ5jV9up0Lh0eIiv3FPRu14aQS35kMdBLMebSW2DNBkfVsOF3l498WWQS9/THIqIaxbqwRDUxba5btBLTN0/A2y6WWiXl05Xu1c=</Modulus><Exponent>AQAB</Exponent>
        static byte[] connectionRsaPattern = {
            0x3C, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x73, 0x00, 0x3E, 0x00, 0x6D, 0x00, 0x46, 0x00, 0x43, 0x00, 0x75, 0x00, 0x62, 0x00, 0x56, 0x00, 0x68, 0x00, 0x50, 0x00,
            0x47, 0x00, 0x47, 0x00, 0x2B, 0x00, 0x65, 0x00, 0x75, 0x00, 0x48, 0x00, 0x75, 0x00, 0x56, 0x00, 0x51, 0x00, 0x62, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x62, 0x00, 0x71, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x2F, 0x00,
            0x4A, 0x00, 0x69, 0x00, 0x30, 0x00, 0x6B, 0x00, 0x52, 0x00, 0x65, 0x00, 0x2B, 0x00, 0x6F, 0x00, 0x68, 0x00, 0x32, 0x00, 0x4F, 0x00, 0x43, 0x00, 0x46, 0x00, 0x52, 0x00, 0x37, 0x00, 0x61, 0x00, 0x56, 0x00,
            0x30, 0x00, 0x39, 0x00, 0x78, 0x00, 0x59, 0x00, 0x69, 0x00, 0x4F, 0x00, 0x6B, 0x00, 0x6C, 0x00, 0x71, 0x00, 0x46, 0x00, 0x51, 0x00, 0x38, 0x00, 0x6A, 0x00, 0x67, 0x00, 0x49, 0x00, 0x67, 0x00, 0x41, 0x00,
            0x48, 0x00, 0x76, 0x00, 0x79, 0x00, 0x43, 0x00, 0x63, 0x00, 0x4D, 0x00, 0x31, 0x00, 0x4A, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x71, 0x00, 0x66, 0x00, 0x46, 0x00, 0x65, 0x00, 0x4A, 0x00, 0x35, 0x00, 0x6A, 0x00,
            0x56, 0x00, 0x39, 0x00, 0x75, 0x00, 0x70, 0x00, 0x30, 0x00, 0x4C, 0x00, 0x68, 0x00, 0x30, 0x00, 0x65, 0x00, 0x49, 0x00, 0x69, 0x00, 0x76, 0x00, 0x33, 0x00, 0x46, 0x00, 0x50, 0x00, 0x52, 0x00, 0x75, 0x00,
            0x31, 0x00, 0x34, 0x00, 0x61, 0x00, 0x51, 0x00, 0x53, 0x00, 0x33, 0x00, 0x35, 0x00, 0x6B, 0x00, 0x4D, 0x00, 0x64, 0x00, 0x42, 0x00, 0x4C, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x62, 0x00, 0x53, 0x00, 0x57, 0x00,
            0x32, 0x00, 0x44, 0x00, 0x4E, 0x00, 0x42, 0x00, 0x6B, 0x00, 0x66, 0x00, 0x56, 0x00, 0x73, 0x00, 0x4F, 0x00, 0x46, 0x00, 0x33, 0x00, 0x6C, 0x00, 0x34, 0x00, 0x39, 0x00, 0x38, 0x00, 0x57, 0x00, 0x57, 0x00,
            0x51, 0x00, 0x53, 0x00, 0x39, 0x00, 0x2F, 0x00, 0x54, 0x00, 0x48, 0x00, 0x49, 0x00, 0x71, 0x00, 0x49, 0x00, 0x61, 0x00, 0x78, 0x00, 0x62, 0x00, 0x71, 0x00, 0x77, 0x00, 0x52, 0x00, 0x44, 0x00, 0x55, 0x00,
            0x78, 0x00, 0x62, 0x00, 0x61, 0x00, 0x35, 0x00, 0x62, 0x00, 0x74, 0x00, 0x42, 0x00, 0x4C, 0x00, 0x54, 0x00, 0x4E, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x41, 0x00, 0x32, 0x00, 0x79, 0x00, 0x36, 0x00, 0x57, 0x00,
            0x57, 0x00, 0x69, 0x00, 0x58, 0x00, 0x6C, 0x00, 0x30, 0x00, 0x35, 0x00, 0x58, 0x00, 0x75, 0x00, 0x31, 0x00, 0x63, 0x00, 0x3D, 0x00, 0x3C, 0x00, 0x2F, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00,
            0x6C, 0x00, 0x75, 0x00, 0x73, 0x00, 0x3E, 0x00, 0x3C, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x3E, 0x00, 0x41, 0x00, 0x51, 0x00, 0x41, 0x00,
            0x42, 0x00, 0x3C, 0x00, 0x2F, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x3E, 0x00 };

        // default public key for RelentlessZero: <Modulus>znUM9M9Eu1oOXjpQ0TT3lNFqa2ybh/18yCPZNlYG+7mtd8xsyl63Ckx/iXCZOHA5FnLyvAN5qHPGh1U8IUY3E0IY9+t5T5/B+ZyHCMjcTehoK8CEfvDLAWIqBXequQ4BlVu1uojrUZtCYXoWaN4Lzg7CHO9e63iLPDvXzA1YZWM=</Modulus><Exponent>AQAB</Exponent>
        static byte[] connectionRsaPatch = {
            0x3C, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x73, 0x00, 0x3E, 0x00, 0x7A, 0x00, 0x6E, 0x00, 0x55, 0x00, 0x4D, 0x00, 0x39, 0x00, 0x4D, 0x00, 0x39, 0x00, 0x45, 0x00,
            0x75, 0x00, 0x31, 0x00, 0x6F, 0x00, 0x4F, 0x00, 0x58, 0x00, 0x6A, 0x00, 0x70, 0x00, 0x51, 0x00, 0x30, 0x00, 0x54, 0x00, 0x54, 0x00, 0x33, 0x00, 0x6C, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x71, 0x00, 0x61, 0x00,
            0x32, 0x00, 0x79, 0x00, 0x62, 0x00, 0x68, 0x00, 0x2F, 0x00, 0x31, 0x00, 0x38, 0x00, 0x79, 0x00, 0x43, 0x00, 0x50, 0x00, 0x5A, 0x00, 0x4E, 0x00, 0x6C, 0x00, 0x59, 0x00, 0x47, 0x00, 0x2B, 0x00, 0x37, 0x00,
            0x6D, 0x00, 0x74, 0x00, 0x64, 0x00, 0x38, 0x00, 0x78, 0x00, 0x73, 0x00, 0x79, 0x00, 0x6C, 0x00, 0x36, 0x00, 0x33, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x78, 0x00, 0x2F, 0x00, 0x69, 0x00, 0x58, 0x00, 0x43, 0x00,
            0x5A, 0x00, 0x4F, 0x00, 0x48, 0x00, 0x41, 0x00, 0x35, 0x00, 0x46, 0x00, 0x6E, 0x00, 0x4C, 0x00, 0x79, 0x00, 0x76, 0x00, 0x41, 0x00, 0x4E, 0x00, 0x35, 0x00, 0x71, 0x00, 0x48, 0x00, 0x50, 0x00, 0x47, 0x00,
            0x68, 0x00, 0x31, 0x00, 0x55, 0x00, 0x38, 0x00, 0x49, 0x00, 0x55, 0x00, 0x59, 0x00, 0x33, 0x00, 0x45, 0x00, 0x30, 0x00, 0x49, 0x00, 0x59, 0x00, 0x39, 0x00, 0x2B, 0x00, 0x74, 0x00, 0x35, 0x00, 0x54, 0x00,
            0x35, 0x00, 0x2F, 0x00, 0x42, 0x00, 0x2B, 0x00, 0x5A, 0x00, 0x79, 0x00, 0x48, 0x00, 0x43, 0x00, 0x4D, 0x00, 0x6A, 0x00, 0x63, 0x00, 0x54, 0x00, 0x65, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x4B, 0x00, 0x38, 0x00,
            0x43, 0x00, 0x45, 0x00, 0x66, 0x00, 0x76, 0x00, 0x44, 0x00, 0x4C, 0x00, 0x41, 0x00, 0x57, 0x00, 0x49, 0x00, 0x71, 0x00, 0x42, 0x00, 0x58, 0x00, 0x65, 0x00, 0x71, 0x00, 0x75, 0x00, 0x51, 0x00, 0x34, 0x00,
            0x42, 0x00, 0x6C, 0x00, 0x56, 0x00, 0x75, 0x00, 0x31, 0x00, 0x75, 0x00, 0x6F, 0x00, 0x6A, 0x00, 0x72, 0x00, 0x55, 0x00, 0x5A, 0x00, 0x74, 0x00, 0x43, 0x00, 0x59, 0x00, 0x58, 0x00, 0x6F, 0x00, 0x57, 0x00,
            0x61, 0x00, 0x4E, 0x00, 0x34, 0x00, 0x4C, 0x00, 0x7A, 0x00, 0x67, 0x00, 0x37, 0x00, 0x43, 0x00, 0x48, 0x00, 0x4F, 0x00, 0x39, 0x00, 0x65, 0x00, 0x36, 0x00, 0x33, 0x00, 0x69, 0x00, 0x4C, 0x00, 0x50, 0x00,
            0x44, 0x00, 0x76, 0x00, 0x58, 0x00, 0x7A, 0x00, 0x41, 0x00, 0x31, 0x00, 0x59, 0x00, 0x5A, 0x00, 0x57, 0x00, 0x4D, 0x00, 0x3D, 0x00, 0x3C, 0x00, 0x2F, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00,
            0x6C, 0x00, 0x75, 0x00, 0x73, 0x00, 0x3E, 0x00, 0x3C, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x3E, 0x00, 0x41, 0x00, 0x51, 0x00, 0x41, 0x00,
            0x42, 0x00, 0x3C, 0x00, 0x2F, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x3E, 0x00 };

        // 107.21.58.31
        static byte[] serverIpPattern = { 0x31, 0x00, 0x30, 0x00, 0x37, 0x00, 0x2E, 0x00, 0x32, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x35, 0x00, 0x38, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x31, 0x00 };
        // 127.0.0.1
        static byte[] serverIpPatch = { 0x31, 0x00, 0x32, 0x00, 0x37, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        static byte[] binary;

        static void Main(string[] args)
        {
            Console.Title = "RelentlessZero Scrolls 1.4.x Patcher";

            try
            {
                var br = new BinaryReader(File.Open("Assembly-CSharp.dll", FileMode.Open));
                using (var ms = new MemoryStream())
                {
                    br.BaseStream.CopyTo(ms);
                    binary = ms.ToArray();
                }
            }
            catch (Exception ex)
            {
                Console.Write(ex.Message);
                Console.ReadLine();

                Environment.Exit(0);
            }

            Console.WriteLine("Patching legacy public RSA connection key...");
            foreach (int offset in FindPattern(connectionRsaPattern))
                WritePatch(offset, connectionRsaPatch);

            Console.WriteLine("Patching load balancer server IP...");
            foreach (int offset in FindPattern(serverIpPattern))
                WritePatch(offset, serverIpPatch);

            // TODO: patch version check address

            File.WriteAllBytes("Assembly-CSharp.dll.patched", binary);

            Console.Write("Finished!");
            Console.ReadLine();
        }

        static List<int> FindPattern(params byte[] pattern)
        {
            var result = Enumerable.Range(0, binary.Length - pattern.Length + 1)
                .Where(i => pattern.Select((b, j) => new { j, b })
                .All(p => binary[i + p.j] == p.b))
                .ToList();

            foreach (int offset in result)
                Console.WriteLine($"   Offset: {"0x" + offset.ToString("X6")}");

            return result;
        }

        static void WritePatch(int offset, params byte[] patch)
        {
            for (int i = 0; i < patch.Length; i++)
                binary[offset + i] = patch[i];
        }
    }
}
